diff --git a/analitzaplot/plotter3d.cpp b/analitzaplot/plotter3d.cpp
index 492a84c87558ce85722b0d26727f264a6d914e4c..6e063bb112575b3d7d2d93c70311a32c3608f73e 100644
--- a/analitzaplot/plotter3d.cpp
+++ b/analitzaplot/plotter3d.cpp
@@ -142,6 +142,12 @@ void Plotter3D::setViewport(const QRectF& vp)
     renderGL();
 }
 
+// add overloaded functions which call the underlying OpenGL function
+inline void glMultMatrix(const GLfloat  *m) { glMultMatrixf(m); }
+inline void glMultMatrix(const GLdouble *m) { glMultMatrixd(m); }
+
+inline void glMultMatrix(const QMatrix4x4 &m) { glMultMatrix(m.constData()); }
+
 void Plotter3D::drawPlots()
 {
     glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
@@ -152,7 +158,7 @@ void Plotter3D::drawPlots()
 
     glMatrixMode(GL_MODELVIEW);
     glLoadIdentity();
-    glMultMatrixd(m_rot.data());
+    glMultMatrix(m_rot.data());
 
     // Object Drawing :
     glCallList(m_sceneObjects.value(Axes));
@@ -397,6 +403,14 @@ void Plotter3D::scale(GLdouble factor)
     renderGL();
 }
 
+inline QMatrix4x4 get_matrix(GLdouble *m)
+{
+    return QMatrix4x4(m[0],  m[1],  m[2],  m[3],
+                      m[4],  m[5],  m[6],  m[7],
+                      m[8],  m[9],  m[10], m[11],
+                      m[12], m[13], m[14], m[15]);
+}
+
 void Plotter3D::rotate(int dx, int dy)
 {
     GLdouble ax = -dy;
@@ -415,7 +429,7 @@ void Plotter3D::rotate(int dx, int dy)
 
         glGetDoublev(GL_MODELVIEW_MATRIX, matrix);
 
-        QMatrix4x4 matrix4(matrix);
+        QMatrix4x4 matrix4(get_matrix(matrix));
         bool couldInvert;
         matrix4 = matrix4.inverted(&couldInvert);
 
